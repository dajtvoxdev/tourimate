name: Backend CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'tourimate/**'
      - 'entities/**'
      - '.github/workflows/backend-ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'tourimate/**'
      - 'entities/**'

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: './tourimate'
  SOLUTION_PATH: './tourimate.sln'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

    - name: Run tests
      run: dotnet test ${{ env.SOLUTION_PATH }} --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: '**/TestResults/**'

  deploy-production:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build for production
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore

    - name: Publish application
      run: dotnet publish ${{ env.PROJECT_PATH }} --configuration Release --output ./publish --no-build

    - name: Create deployment package
      run: |
        cd publish
        zip -r ../tourimate-production.zip .
        cd ..
        echo "Package created successfully"
        ls -lh tourimate-production.zip

    - name: Upload deployment package to VPS
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        source: "tourimate-production.zip"
        target: "C:/Users/deploy/"
        strip_components: 0

    - name: Execute deployment on VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        command_timeout: 30m
        script: |
          powershell.exe -ExecutionPolicy Bypass -Command ^
          "$ErrorActionPreference = 'Continue'; ^
          Write-Host '=== DEBUG START ==='; ^
          Write-Host \"PowerShell Version: $($PSVersionTable.PSVersion)\"; ^
          Write-Host \"Current user: $(whoami)\"; ^
          Set-Location C:\Users\deploy; ^
          Write-Host \"Current directory: $(Get-Location)\"; ^
          Write-Host 'Files in deploy directory:'; ^
          Get-ChildItem ^| Format-Table Name, Length, LastWriteTime -AutoSize; ^
          Write-Host 'Checking ZIP file...'; ^
          if (Test-Path 'tourimate-production.zip') { ^
            $zipFile = Get-Item 'tourimate-production.zip'; ^
            Write-Host \"ZIP exists - Size: $([math]::Round($zipFile.Length / 1MB, 2)) MB\"; ^
          } else { ^
            Write-Host 'ERROR: ZIP file not found!'; ^
            exit 1; ^
          }; ^
          Write-Host '=== DEPLOYMENT START ==='; ^
          try { ^
            Import-Module WebAdministration; ^
            Stop-Website -Name 'TouriMate API Production' -ErrorAction SilentlyContinue; ^
            Write-Host 'Website stopped'; ^
          } catch { Write-Host \"Warning: $_\" }; ^
          $deployPath = 'C:\inetpub\wwwroot\tourimate-production'; ^
          if (Test-Path $deployPath) { ^
            $backup = \"C:\inetpub\wwwroot\tourimate-production-backup-$(Get-Date -Format 'yyyyMMdd-HHmmss')\"; ^
            Move-Item $deployPath $backup -Force; ^
            Write-Host \"Backed up to: $backup\"; ^
          }; ^
          New-Item -ItemType Directory -Path $deployPath -Force ^| Out-Null; ^
          Write-Host 'Extracting files...'; ^
          Expand-Archive -Path 'C:\Users\deploy\tourimate-production.zip' -DestinationPath $deployPath -Force; ^
          $files = Get-ChildItem $deployPath -Recurse -File; ^
          Write-Host \"Extracted $($files.Count) files\"; ^
          Get-ChildItem $deployPath ^| Format-Table Name, Length -AutoSize; ^
          icacls $deployPath /grant 'IIS_IUSRS:(OI)(CI)F' /T; ^
          Start-Website -Name 'TouriMate API Production'; ^
          $site = Get-Website -Name 'TouriMate API Production'; ^
          Write-Host \"Website state: $($site.State)\"; ^
          Write-Host '=== DEPLOYMENT COMPLETE ===';"

    - name: Run database migrations
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        command_timeout: 10m
        script: |
          powershell.exe -ExecutionPolicy Bypass -Command "& { Set-Location C:\inetpub\wwwroot\tourimate-production; Write-Host 'Running database migration...'; dotnet ef database update --connection '${{ secrets.CONNECTION_STRING_PRODUCTION }}'; Write-Host 'Migration completed' }"

    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: tourimate-production-package
        path: tourimate-production.zip