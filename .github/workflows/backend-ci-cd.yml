name: Backend CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'tourimate/**'
      - 'entities/**'
      - '.github/workflows/backend-ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'tourimate/**'
      - 'entities/**'

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: './tourimate'
  SOLUTION_PATH: './tourimate.sln'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

    - name: Run tests
      run: dotnet test ${{ env.SOLUTION_PATH }} --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: '**/TestResults/**'

  deploy-production:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build for production
      run: dotnet build ${{ env.PROJECT_PATH }} --configuration Release --no-restore

    - name: Publish application
      run: dotnet publish ${{ env.PROJECT_PATH }} --configuration Release --output ./publish --no-build

    - name: Create deployment package
      run: |
        cd publish
        tar -czf ../tourimate-production.tar.gz .

    - name: Upload deployment package and script to VPS
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        source: "tourimate-production.tar.gz,deployment/deploy-backend.ps1"
        target: "C:/Users/deploy/"
        debug: true
        timeout: 60s

    - name: Deploy to Windows VPS (Production)
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        command_timeout: 30m
        shell: pwsh
        script: |
          Write-Host "=== RUNNING DEPLOYMENT SCRIPT ===" -ForegroundColor Cyan
          Set-Location C:\Users\deploy
          Write-Host "Current directory:" (Get-Location) -ForegroundColor White
          Write-Host "Files in directory:" -ForegroundColor White
          Get-ChildItem | Format-Table Name, Length -AutoSize
          
          Write-Host "Checking tar.gz file..." -ForegroundColor Yellow
          if (Test-Path "tourimate-production.tar.gz") {
            Write-Host "✅ Package found: tourimate-production.tar.gz" -ForegroundColor Green
            Write-Host "Size:" ((Get-Item "tourimate-production.tar.gz").Length / 1MB) "MB" -ForegroundColor White
          } else {
            Write-Host "❌ ERROR: tourimate-production.tar.gz not found!" -ForegroundColor Red
            exit 1
          }
          
          Write-Host "=== DEPLOYMENT START ===" -ForegroundColor Cyan
          Write-Host "Stopping IIS website..." -ForegroundColor Yellow
          Import-Module WebAdministration
          Stop-Website -Name "TouriMate API Production" -ErrorAction SilentlyContinue
          
          Write-Host "Backing up existing deployment..." -ForegroundColor Yellow
          if (Test-Path "C:\inetpub\wwwroot\tourimate-production") {
            Move-Item "C:\inetpub\wwwroot\tourimate-production" "C:\inetpub\wwwroot\tourimate-production-backup-$(Get-Date -Format 'yyyyMMdd-HHmmss')" -Force
          }
          
          Write-Host "Creating new directory..." -ForegroundColor Yellow
          New-Item -ItemType Directory -Path "C:\inetpub\wwwroot\tourimate-production" -Force | Out-Null
          
          Write-Host "Extracting files..." -ForegroundColor Yellow
          tar -xzf "tourimate-production.tar.gz" -C "C:\inetpub\wwwroot\tourimate-production" -v
          
          Write-Host "Verifying extraction..." -ForegroundColor Yellow
          $files = Get-ChildItem "C:\inetpub\wwwroot\tourimate-production" -Recurse -File
          Write-Host "Total files extracted:" $files.Count -ForegroundColor Green
          
          Write-Host "Setting permissions..." -ForegroundColor Yellow
          icacls "C:\inetpub\wwwroot\tourimate-production" /grant "IIS_IUSRS:(OI)(CI)F" /T
          
          Write-Host "Starting IIS website..." -ForegroundColor Yellow
          Start-Website -Name "TouriMate API Production"
          
          Write-Host "=== DEPLOYMENT COMPLETE ===" -ForegroundColor Green

    - name: Run database migrations
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        shell: pwsh
        script: |
          Write-Host "=== DATABASE MIGRATION START ===" -ForegroundColor Cyan
          Set-Location C:\inetpub\wwwroot\tourimate-production
          Write-Host "Current directory:" (Get-Location) -ForegroundColor White
          Write-Host "Files in directory:" -ForegroundColor White
          Get-ChildItem | Select-Object Name, Length
          Write-Host "Running database migration..." -ForegroundColor Yellow
          dotnet ef database update --connection "${{ secrets.CONNECTION_STRING_PRODUCTION }}"
          Write-Host "=== DATABASE MIGRATION COMPLETE ===" -ForegroundColor Green

    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: tourimate-production-package
        path: tourimate-production.tar.gz